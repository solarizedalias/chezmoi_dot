#compdef curl

# ==========================================================
# _curl
# curl 7.71.0
# based on https://github.com/Valodim/zsh-curl-completion
# AUTHOR solarizedalias
# Wed Jun 24 22:13:59 2020
# ==========================================================

setopt localoptions NO_shwordsplit
setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

local context curcontext=${curcontext} state line expl state_descr
integer ret=1
local -A opt_args val_args

local -a urls

(( ${+functions[__curl_crypto_engine]} )) || __curl_crypto_engine() {
    local vals
    vals=( ${${(f)"$(curl --engine list)":gs/ /}[2,$]} )
    _describe -t outputs 'engines' vals && return 0
}

(( ${+functions[__curl_post_data]} )) || __curl_post_data() {

    # don't do anything further if this is raw content
    compset -P '=' && _message 'raw content' && return 0

    # complete filename or stdin for @ syntax
    compset -P '*@' && {
        local expl
        _description files expl stdin
        compadd "${expl[@]}" - "-"
        _files
        return 0
    }

    # got a name already? expecting data.
    compset -P '*=' && _message 'data value' && return 0

    # otherwise, name (or @ or =) should be specified
    _message 'data name' && return 0

}

local -a arg_http arg_ftp arg_other arg_proxy arg_crypto arg_connection arg_auth arg_input arg_output

# TODO WIP
(( ${+functions[__curl_host_port]} )) || __curl_host_port() {
  _combination -s '[:@]' '' hosts-ports
}

local -a new_arg
# data <HOST1:PORT1:HOST2:PORT2> option(key=val)?
new_arg=(
  --abstract-unix-socket'[Connect via abstract Unix domain socket]:path:_path_files'
  --alt-svc'[Enable alt-svc with this cache file]:file:_path_files'
  --cert-status'[Verify the status of the server certificat]'
  --compressed-ssh'[Enable SSH compression]'
  # TODO <HOST1:PORT1:HOST2:PORT2>
  --connect-to'[Connect to host]:host\:port'

  # TODO data
  --data-ascii'[HTTP POST ASCII data]:data'
  --data-raw'[HTTP POST data, ''\@'' allowed]:data'

  --disallow-username-in-url'[Disallow username in url]'

  --dns-interface'[Interface to use for DNS requests]'
  --dns-ipv4-addr'[IPv4 address to use for DNS requests]:adress'
  --dns-ipv6-addr'[IPv6 address to use for DNS requests]:adress'
  --dns-servers'[DNS server addrs to use]:adresses'

  --doh-url'[Resolve host names over DOH]:url:_urls'
  --etag-compare'[Pass an ETag from a file as a custom header]:file:_path_files'
  --etag-save'[Parse ETag from a request and save it to a file]:file:_path_files'
  --expect100-timeout'[How long to wait for 100-continue]:seconds'
  --fail-early'[Fail on first transfer error, do not continue]'
  --false-start'[Enable TLS False Start]'
  --happy-eyeballs-timeout-ms'[Time for IPv6 before trying IPv4]:milliseconds'
  --haproxy-protocol'[Send HAProxy PROXY protocol v1 header]'

  --http0.9'[Allow HTTP 0.9 responses]'
  --http2'[Use HTTP 2]'
  --http2-prior-knowledge'[Use HTTP 2 without HTTP/1.1 Upgrade]'
  --http3'[Use HTTP v3]'

# TODO options
  --login-options'[Server login options]:options'

# arg_other?
  --mail-auth'[Originator address of the original email]:adress'
  --mail-rcpt-allowfails'[Allow RCPT TO command to fail for some recipients]'

  --metalink'[Process given URLs as metalink XML file]'
  '(-\: --next)'{-\:,--next}'[Make next URL use its separate set of options]'
  --no-alpn'[Disable the ALPN TLS extension]'
  --no-npn'[Disable the NPN TLS extension]'

  # How is this different from -s --silent (or -sS) ?
  --no-progress-meter'[Do not show the progress meter]'
  --ntlm-wb'[Use HTTP NTLM authentication with winbind]'
  --oauth2-bearer'[OAuth 2 Bearer Token]:token'
  '(-Z --parallel)'{-Z,--parallel}'[Perform transfers in parallel]'
  --parallel-immediate'[Do not wait for multiplexing (with --parallel)]'
  --parallel-max'[Maximum concurrency for parallel transfers]'
  --path-as-is'[Do not squash .. sequences in URL path]'
  --pinnedpubkey'[FILE/HASHES Public key to verify peer against]:hashes'

  # might safely move to arg_http section
  --post303'[Do not switch to GET after following a 303]'
  # TODO [protocol://]host[:port]
  --preproxy'[Use this proxy first]:protocol'
  --proto-default'[Use PROTOCOL for any URL missing a scheme]:protocol'
  --proxy-cacert'[CA certificate to verify peer against for proxy]:file:_path_files'
  --proxy-capath'[CA directory to verify peer against for proxy]:dir:_directories'

  # TODO <cert[:passwd]>
  --proxy-cert'[Set client certificate for proxy]:cert'
  --proxy-cert-type'[Client certificate type for HTTPS proxy]:type'
  --proxy-ciphers'[ciphers to use for proxy]:list'
  --proxy-crlfile'[Set a CRL list for proxy]:file:_path_files'

  # TODO <header/@file>
  --proxy-header'[Pass custom header(s) to proxy]:header/@file'
  --proxy-insecure'[Do HTTPS proxy connections without verifying the proxy]'
  --proxy-key'[Private key for HTTPS proxy]:key'
  --proxy-key-type'[Private key file type for proxy]:type'
  --proxy-pass'[Pass phrase for the private key for HTTPS proxy]:phrase'
  --proxy-pinnedpubkey'[FILE/HASHES public key to verify proxy with]:hashes'
  --proxy-service-name'[SPNEGO proxy service name]:name'
  --proxy-ssl-allow-beast'[llow security flaw for interop for HTTPS proxy]'
  --proxy-tls13-ciphers'[TLS 1.3 proxy cipher suites]:ciphersuite_list'
  --proxy-tlsauthtype'[TLS authentication type for HTTPS proxy]:type'
  --proxy-tlspassword'[TLS password for HTTPS proxy]:string'
  --proxy-tlsuser'[TLS username for HTTPS proxy]:name'
  --proxy-tlsv1'[Use TLSv1 for HTTPS proxy]'
  --remote-name-all'[Use the remote file name for all URLs]'
  --request-target'[Specify the target for this request]'
  --retry-all-errors'[Retry all errors (use with --retry)]'
  --retry-connrefused'[Retry on connection refused (use with --retry)]'
  --sasl-authzid'[Identity for SASL PLAIN authentication]:identity'
  --sasl-ir'[Enable initial response in SASL authentication]'
  --service-name'[SPNEGO service name]:name'

  # arg_proxy
  --socks4'[SOCKS4 proxy on given host + port]'
  --socks4a'[SOCKS4a proxy on given host + port]'
  --socks5'[SOCKS5 proxy on given host + port]'
  --socks5-basic'[Enable username/password auth for SOCKS5 proxies]'
  --socks5-gssapi'[Enable GSS-API auth for SOCKS5 proxies]'
  # --socks5-gssapi-nec'[Compatibility with NEC SOCKS5 server]'
  # --socks5-gssapi-service'[SOCKS5 proxy service name for GSS-API]:name'
  # TODO <host[:port]>
  --socks5-hostname'[SOCKS5 proxy, pass host name to proxy]:host\:port'

  --ssl-allow-beast'[Allow security flaw to improve interop]'
  --ssl-no-revoke'[Disable cert revocation checks (Schannel)]'
  --ssl-revoke-best-effort'[Ignore missing/offline cert CRL dist points]'
  --styled-output'[Enable styled output for HTTP headers]'
  --suppress-connect-headers'[Suppress proxy CONNECT response headers]'
  --tcp-fastopen'[Use TCP Fast Open]'
  --tftp-no-options'[Use the TCP_NODELAY option]'
  --tls-max'[Set maximum allowed TLS version]'
  # <ciphersuite list>
  --tls13-ciphers'[TLS 1.3 cipher suites to use]:ciphersuite_list'
  # TODO consider glob qualifiers or something
  --unix-socket'[Connect through this Unix domain socket]:file:_path_files'
  --user-agent'[Send User-Agent <name> to server]:name'
)

# HTTP Arguments
arg_http=(
 '(-0  --http1.0)'{-0,--http1.0}'[force use of use http 1.0 instead of 1.1]'
 '(-b --cookie)'{-b,--cookie}'[pass data to http server as cookie]:data or file'
 '(-c --cookie-jar)'{-c,--cookie-jar}'[specify cookie file]:file name:_files'
 '(-d --data)'{-d,--data}'[send specified data as HTTP POST data]:data:{__curl_post_data}'
  '--data-binary[post HTTP POST data without any processing]:data:{__curl_post_data}'
  '--data-urlencode[post HTTP POST data, with url encoding]:data:{__curl_post_data}'
 '(-f --fail)'{-f,--fail}'[enable failfast behavior for server errors]'
  '*'{-F,--form}'[add POST form data]:name=content'
 '(-G --get)'{-G,--get}'[use HTTP GET even with data (-d, --data, --data-binary)]'
  '*'{-H,--header}'[specify an extra header]:header'
  '--ignore-content-length[ignore Content-Length header]'
  '(-i --include)'{-i,--include}'[include HTTP header in the output]'
  '(-j --junk-session-cookies)'{-j,--junk-session-cookies}'[discard all session cookies]'
  '(-e --referer)'{-e,--referer}'[send url as referer]:referer url:_urls'
  '(-L --location)'{-L,--location}'[follow Location headers on http 3XX response]'
  '--location-trusted[like --location, but allows sending of auth data to redirected hosts]'
  '--max-redirs[set maximum number of redirection followings allowed]:number'
  '(-J --remote-header-name)'{-J,--remote-header-name}'[use Content-Disposition for output file name]'
  '(-O --remote-name)'{-O,--remote-name}'[write to filename parsed from url instead of stdout]'
  '--post301[do not convert POST to GET after following 301 Location response (follow RFC 2616/10.3.2)]'
  '--post302[do not convert POST to GET after following 302 Location response (follow RFC 2616/10.3.2)]'
  )

# FTP arguments
arg_ftp=(
  '(-a --append)'{-a,--append}'[append to target file instead of overwriting (FTP/SFTP)]'
  '--crlf[convert LF to CRLF in upload]'
  '--disable-eprt[disable use of EPRT and LPRT for active FTP transfers]'
  '--disable-epsv[disable use of EPSV for passive FTP transfers]'
  '--ftp-account[account data (FTP)]:data'
  '--ftp-alternative-to-user[command to send when USER and PASS commands fail (FTP)]:command'
  '--ftp-create-dirs[create paths remotely if it does not exist]'
  '--ftp-method[ftp method to use to reach a file (FTP)]:method:(multicwd ocwd singlecwd)'
  '--ftp-pasv[use passive mode for the data connection (FTP)]'
  '--ftp-skip-pasv-ip[do not use the ip the server suggests for PASV]'
  '--form-string[like --form, but do not parse content]:name=string'
  '--ftp-pret[send PRET before PASV]'
  '--ftp-ssl-ccc[use clear command channel (CCC) after authentication (FTP)]'
  '--ftp-ssl-ccc-mode[sets the CCC mode (FTP)]:mode:(active passive)'
  '--ftp-ssl-control[require SSL/TLS for FTP login, clear for transfer]'
  '(-l --list-only)'{-l,--list-only}'[list names only when listing directories (FTP)]'
  '(-P --ftp-port)'{-P,--ftp-port}'[use active mode, tell server to connect to specified address or interface (FTP]:address'
  '*'{-Q,--quote}'[send arbitrary command to the remote server before transfer (FTP/SFTP)]:command'
  )

# Other Protocol arguments
arg_other=(
  '--mail-from[specify From: address]:address'
  '--mail-rcpt[specify email recipient for SMTP, may be given multiple times]:address'
  '(-t --telnet-option)'{-t,--telnet-option}'[pass options to telnet protocol]:opt=val'
  '--tftp-blksize[set tftp BLKSIZE option]:value'
  )

# Proxy arguments
arg_proxy=(
  '--noproxy[list of hosts to connect directly to instead of through proxy]:no-proxy-list'
  '(-p --proxytunnel)'{-p,--proxytunnel}'[tunnel non-http protocols through http proxy]'
  '(-U --proxy-user)'{-U,--proxy-user}'[specify the user name and password to use for proxy authentication]:user:password'
  '--proxy-anyauth[use any authentication method for proxy, default to most secure]'
  '--proxy-basic[use HTTP Basic authentication for proxy]'
  '--proxy-digest[use http digest authentication for proxy]'
  '--proxy-negotiate[enable GSS-Negotiate authentication for proxy]'
  '--proxy-ntlm[enable ntlm authentication for proxy]'
  '--proxy1.0[use http 1.0 proxy]:proxy url'
  '(-x --proxy)'{-x,--proxy}'[use specified proxy]:proxy url'
  '--socks5-gssapi-service[change service name for socks server]:servicename'
  '--socks5-gssapi-nec[allow unprotected exchange of protection mode negotiation]'
  )

# Crypto arguments
arg_crypto=(
  '(-1 --tlsv1)'{-1,--tlsv1}'[Forces curl to use TLS version 1 when negotiating with a remote TLS server.]'
  '(-2 --sslv2)'{-2,--sslv2}'[Forces curl to use SSL version 2 when negotiating with a remote SSL server.]'
  '(-3 --sslv3)'{-3,--sslv3}'[Forces curl to use SSL version 3 when negotiating with a remote SSL server.]'
  '--ciphers[specifies which cipher to use for the ssl connection]:list of ciphers'
  '--crlfile[specify file with revoked certificates]:file'
  '--delegation[set delegation policy to use with GSS/kerberos]:delegation policy:(none policy always)'
  '(-E --cert)'{-E,--cert}'[use specified client certificate]:certificate file:_files'
  '--engine[use selected OpenSSL crypto engine]:ssl crypto engine:{__curl_crypto_engine}'
  '--egd-file[set ssl entropy gathering daemon socket]:entropy socket:_files'
  '--cert-type[specify certificate type (PEM, DER, ENG)]:certificate type:(PEM DER ENG)'
  '--cacert[specify certificate file to verify the peer with]:CA certificate:_files'
  '--capath[specify a search path for certificate files]:CA certificate directory:_directories'
  '--hostpubmd5[check remote hosts public key]:md5 hash'
  '(-k --insecure)'{-k,--insecure}'[allow ssl to perform insecure ssl connections (ie, ignore certificate)]'
  '--key[ssl/ssh private key file name]:key file:_files'
  '--key-type[ssl/ssh private key file type]:file type:(PEM DER ENG)'
  '--pubkey[ssh public key file]:pubkey file:_files'
  '--random-file[set source of random data for ssl]:random source:_files'
  '--no-sessionid[disable caching of ssl session ids]'
  '--pass:phrase[passphrase for ssl/ssh private key]'
  '--ssl[try to use ssl/tls for connection, if available]'
  '--ssl-reqd[try to use ssl/tls for connection, fail if unavailable]'
  '--tlsauthtype[set TLS authentication type (only SRP supported!)]:authtype'
  '--tlsuser[set username for TLS authentication]:user'
  '--tlspassword[set password for TLS authentication]:password'
  )

# Connection arguments
arg_connection=(
  '(-4 --ipv4)'{-4,--ipv4}'[prefer ipv4]'
  '(-6 --ipv6)'{-6,--ipv6}'[prefer ipv6, if available]'
  '(-B --use-ascii)'{-B,--use-ascii}'[use ascii mode]'
  '--compressed[request a compressed transfer]'
  '--connect-timeout[timeout for connection phase]:seconds'
  '(-I --head)'{-I,--head}'[fetch http HEAD only (HTTP/FTP/FILE]'
  '--interface[work on a specific interface]:name'
  '--keepalive-time[set time to wait before sending keepalive probes]:seconds'
  '--limit-rate[specify maximum transfer rate]:speed'
  '--local-port[set preferred number or range of local ports to use]:num'
  '(-N --no-buffer)'{-N,--no-buffer}'[disable buffering of the output stream]'
  '--no-keepalive[disable use of keepalive messages in TCP connections]'
  '--raw[disable all http decoding and pass raw data]'
  '--resolve[provide a custom address for a specific host and port pair]:host\:port\:address'
  '--retry[specify maximum number of retries for transient errors]:num'
  '--retry-delay[specify delay between retries]:seconds'
  '--retry-max-time[maximum time to spend on retries]:seconds'
  '--tcp-nodelay[turn on TCP_NODELAY option]'
  '(-y --speed-time)'{-y,--speed-time}'[specify time to abort after if download is slower than speed-limit]:time'
  '(-Y --speed-limit)'{-Y,--speed-limit}'[specify minimum speed for --speed-time]:speed'
  )

# Authentication arguments
arg_auth=(
  '--anyauth[use any authentication method, default to most secure]'
  '--basic[use HTTP Basic authentication]'
  '--ntlm[enable ntlm authentication]'
  '--digest[use http digest authentication]'
  '--krb[use kerberos authentication]:auth:(clear safe confidential private)'
  '--negotiate[enable GSS-Negotiate authentication]'
  '(-n --netrc)'{-n,--netrc}'[scan ~/.netrc for login data]'
  '--netrc-optional[like --netrc, but does not make .netrc usage mandatory]'
  '--netrc-file[like --netrc, but specify file to use]:netrc file:_files'
  '--tr-encoding[request compressed transfer-encoding]'
  '(-u --user)'{-u,--user}'[specify user name and password for server authentication]:user\:password'
  )

# Input arguments
arg_input=(
  '(-C --continue-at)'{-C,--continue-at}'[resume at offset ]:offset'
  '(-g --globoff)'{-g,--globoff}'[do not glob {}\[\] letters]'
  '--max-filesize[maximum filesize to download, fail for bigger files]:bytes'
  '--proto[specify allowed protocols for transfer]:protocols'
  '--proto-redir[specify allowed protocols for transfer after a redirect]:protocols'
  '(-r --range)'{-r,--range}'[set range of bytes to request (HTTP/FTP/SFTP/FILE)]:range'
  '(-R --remote-time)'{-R,--remote-time}'[use timestamp of remote file for local file]'
  '(-T --upload-file)'{-T,--upload-file}'[transfer file to remote url (using PUT for HTTP)]:file to upload:_files'
  '--url[specify a URL to fetch (multi)]:url:_urls'
  '(-z --time-cond)'{-z,--time-cond}'[request downloaded file to be newer than date or given reference file]:date expression'
  )

# Output arguments
arg_output=(
  '--create-dirs[create local directory hierarchy as needed]'
  '(-D --dump-header)'{-D,--dump-header}'[write protocol headers to file]:dump file:_files'
  '(-o --output)'{-o,--output}'[write to specified file instead of stdout]:output file:_files'
  {--progress-bar,-\#}'[display progress as a simple progress bar]'
  {-\#,--progress-bar}'[Make curl display progress as a simple progress bar instead of the standard, more informational, meter.]'
  '(-R --remote-time)'{-R,--remote-time}'[use timestamp of remote file for local file]'
  '--raw[disable all http decoding and pass raw data]'
  '(-s --silent)'{-s,--silent}'[silent mode, do not show progress meter or error messages]'
  '(-S --show-error)'{-S,--show-error}'[show errors in silent mode]'
  '--stderr[redirect stderr to specified file]:output file:_files'
  '--trace[enable full trace dump of all incoming and outgoing data]:trace file:_files'
  '--trace-ascii[enable full trace dump of all incoming and outgoing data, without hex data]:trace file:_files'
  '--trace-time[prepends a time stamp to each trace or verbose line that curl displays]'
  '(-v --verbose)'{-v,--verbose}'[output debug info]'
  '(-w --write-out)'{-w,--write-out}'[specify message to output on successful operation]:format string'
  '--xattr[store some file metadata in extended file attributes]'
  '(-X --request)'{-X,--request}'[specifies request method for HTTP server]:method:(GET POST PUT DELETE HEAD OPTIONS TRACE CONNECT PATCH LINK UNLINK)'
  )

local -a optspecs=(
  ${(@)arg_http}
  ${(@)arg_ftp}
  ${(@)arg_other}
  ${(@)arg_proxy}
  ${(@)arg_crypto}
  ${(@)arg_connection}
  ${(@)arg_auth}
  ${(@)arg_input}
  ${(@)arg_output}
)

# added --disable as alias for -q
_arguments -C -s ${(@)optspecs} \
  '(-h --help)'{-h,--help}'[print usage]' \
  '(-M --manual)'{-M,--manual}'[print manual]' \
  '*'{-K,--config}'[use other config file to read arguments from]:config file:_files' \
  '--libcurl[output libcurl code for the operation to file]:output file:_files' \
  '(-m --max-time)'{-m,--max-time}'[limit total time of operation]:seconds' \
  '(-s --silent)'{-s,--silent}'[silent mode, do not show progress meter or error messages]' \
  '(-S --show-error)'{-S,--show-error}'[show errors in silent mode]' \
  '--stderr[redirect stderr to specified file]:output file:_files' \
  '(-q --disable)'{-q,--disable}'[do not read settings from .curlrc (must be first option)]' \
  '(-V --version)'{-V,--version}'[displays information about curl and the libcurl version it uses]' \
  '*:URL:_urls' && ret=0

return ret

