#compdef nimble

# ==========================================================
# _nimble
# 2020-10-12T11:23:03
# Last updated: 2024/03/31
# based on nimble version v0.14.2 14fdef42a0ed5170702de58fff46e8ff7eec950c
# AUTHOR: solarizedalias
# Completions for nimble.
# ==========================================================

# **********************************************************
# TODO:
#   [√] Complete nim's compiler options for some context.
#       (Requires _nim to be installed in fpath as well as _nimble,
#        which I believe most users of this file already have.)
#
#   [√] tasks in nimble files.
#
#   [ ] Completions for installable packages fail after --ver option.
# **********************************************************

setopt localoptions  NO_shwordsplit
setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

local curcontext=${curcontext} state line expl state_descr ret=1
typeset -A opt_args
local -a match mbegin mend
# _urls creates global array urls.
local -a urls

local -a nimble_installable nimble_installed nimble_subcommands nimble_tasks

nimble_subcommands=(
  'install:Installs a list of packages.'
  'develop:Clones a list of packages for development.'
  'check:Verifies the validity of a package in the current working directory'
  'init:Initialize a new Nimble project in the currenct directory or if a name is provided a new directory of the same name.'
  'publish:Publishes a package on nim-lang/packages.'
  'uninstall:Uninstalls a list of packages.'
  'build:Builds a package.'
  'clean:Clean build artifacts'
  "add:Adds packages to your project's dependencies."
  'run:Builds and runs a package.'
  {c,cc,js}':Builds a file inside a package. Passes options to the Nim compiler.'
  'test:Compiles and executes tests.'
  'doc'{,2}':Builds documentation for a file inside a package.'
  'refresh:Refreshes the package list. A package list URL can be optionally specified.'
  'search:Searches for a specified package. Search is performed by tag and by name.'
  'list:Lists all packages.'
  'tasks:Lists the tasks specified in the Nimble package''s Nimble file.'
  'path:Shows absolute path to the installed packages specified.'
  'dump:Outputs Nimble package information for external tools.'
  'lock:Generates or updates a package lock file.'
  'upgrade:Upgrades a list of packages in the lock file.'
  'deps:Outputs dependency tree'
  'sync:Synchronizes develop mode dependencies with the content of the lock file.'
  'setup:Creates `nimble.paths` file system paths to the dependencies.'
  'shell:Creates a new shell with PATH modified to contain the bin folders of the dependencies.'
  'shellenv:Similar to shell command but it returns the script to run in order to alter the environment.'
)

# Extract options from _nim.
# This works only when _nim is fully loaded (not just marked as autoload so `+X` is needed).
# To tell if it's loaded, check functions_source is non-blank.
#
# We can use `_dispatch nim nim` or `_call_function ret _nim` rather than extracting optspecs from the body
# of _nim. But it would be more complicated to handle context, words, line.... (Invoking _nim actually
# causes all the non-option arguments to be completed as well, which should't be here.)
#
# There is a possibility in shadowing `_arguments` to intercept the call.
# You should be able to obtain all the optspecs from `$@` of shadowed `_arguments`.
# But care must be taken not to break other completions which use `_arguments`,
# which in reality, means almost all completions including this file.

#
# Helper functions
#

(( ${+functions[__nimble_commands]} )) || {
  function __nimble_commands() {
    _describe 'nimble commands' nimble_subcommands && ret=0
  }
}

(( ${+functions[__nimble_tasks]} )) || {
  function __nimble_tasks() {
    (( $#nibmle_tasks )) || {
      local -a tasks_r
      tasks_r=( ${(f)"$(nimble --silent tasks 2>/dev/null)"} ) || return 1
      nimble_tasks=( ${(@)tasks_r/[[:blank:]]##/:} )
      # Manually discard what looks like errors.
      nimble_tasks=( ${(@R)nimble_tasks:#*Error: *} )
    }
    (( ${#nimble_tasks} )) && _describe "tasks" nimble_tasks && ret=0
  }
}

(( ${+functions[__nimble_commands_or_tasks]} )) || {
  function __nimble_commands_or_tasks() {
    (( ${@[(I)(-c)]} )) && nimble_subcommands=( ${(@M)nimble_subcommands:#test*} )
    _alternative \
      'tasks:tasks specified in the nimble file:__nimble_tasks' \
      'command:nimble command:__nimble_commands' && ret=0
  }
}

# XXX: _alternative with `_urls`?
(( ${+functions[__nimble_installable_packages]} )) || {
  function __nimble_installable_packages() {
    (( ${#nimble_installable} )) || {
      # Interesting lines appear every 7 lines.
      # 1 (name), 4 (description), 6 (end) 7 (empty line inbetween packages.)
      local -a list_r
      integer COUNT=1
      list_r=( ${${(f)"$(nimble --silent list 2>/dev/null)"}} )
      for ((COUNT = 1; COUNT <= ${#list_r}; ++COUNT)); do
        # package names starts at column 1. Extract them.
        [[ ${list_r[COUNT]} == (#b)(#s)([[:graph:]]##): ]] && {
          # descriptions appear 3 lines below package names.
          nimble_installable+=( ${match[1]}:${list_r[COUNT+3]#*: } )
        }
      done
    }
    _describe "installable packages" nimble_installable && ret=0
  }
}

# FIXME This probably needs to be fixed for v0.14.0 and later
(( ${+functions[__nimble_installed_packages]} )) || {
  function __nimble_installed_packages() {
    (( ${#nimble_installed} )) || {
      local -a list_i_r
      list_i_r=( ${(f)"$(nimble --silent list -i 2>/dev/null)"} )
      # completes package names with its versions as descriptions.
      nimble_installed=( ${(@)list_i_r//(#b)[[:blank:]]##\[(*)\]/:${match[1]}} )
    }
    _describe "installed packages" nimble_installed && ret=0
  }
}

(( ${+functions[__nimble_nim_options]} )) || {
  function __nimble_nim_options() {
    # My `_nim` just completes compiler options when $service == nimble
    _nim
  }
}

(( ${+functions[__nimble_nim_files]} )) || {
  function __nimble_nim_files() {
    local EXT='nim'

    # switch target extensions to nimble if `dump` appears somewhere in the line.
    (( ${words[(I)dump]} )) && EXT='nimble'

    _path_files -g '*(N-/)' -g "*.${EXT}(N-.)" && ret=0
  }
}

(( ${+functions[__nimble_colon_arg]} )) || {
  function __nimble_colon_arg() {
    local -a args=( $@ )
    local -a compadd_opts=( -P ':' )
    local -a separators=( '\:' '=' )
    local RET
    if compset -P '*[:=]'; then
      _call_function RET "${(@)args:-:}" && ret=0
    else
      _arguments -O compadd_opts \
        ':separators:{ _describe "separator" separators -Q -S ""}' && ret=0
    fi
  }
}

# TODO: generalize this so that it works for non-file completions
# Our strage convension of using `:` as separators is covered here so that both `=` and `:` would work.
(( ${+functions[__nimble_colon_path]} )) || {
  function __nimble_colon_path() {
    __nimble_colon_arg _files "$@"
  }
}

(( ${+functions[__nimble_locked_deps]} )) || {
  function __nimble_locked_deps() {
    (( ${+commands[jq]} )) || return 1
    [[ -r nimble.lock ]] || return 1
    local -a deps
    deps=( $(jq -r '.packages|keys|.[]' nimble.lock) )
    _describe "dependencies" deps && ret=0
  }
}

local -a optspecs=(
  '(-h --help)'{-h,--help}'[display help information]'
  '(-v --version)'{-v,--version}'[display version information]'
  '(-y --accept)'{-y,--accept}'[accept all interactive prompts]'
  '(-n --reject)'{-n,--reject}'[reject all interactive prompts]'
  '(-l --localdeps)'{-l,--localdeps}'[Run in project local dependency mode]'
  '(-p --package
)'{-p,--package}'-[For which package in the dependency tree the command should be executed]:package:{
    __nimble_colon_arg __nimble_installed_packages
  }'
  '(-t --tarballs)'{-t,--tarballs}'[Enable downloading of packages as tarballs]'
  '--ver[Query remote server for package version information when searching or listing packages]'
  '--nimbleDir-[Set the Nimble directory]:dirname:{ __nimble_colon_path -/ }'
  '--nim-[Use specified path for Nim compiler]:nimpath:{ __nimble_colon_path -f }'
  '--silent[Hide all Nimble and Nim output]'
  '--verbose[Show all non-debug output.]'
  '--debug[Show all output including debug messages.]'
  "--noColor[Don't colorise output.]"
  "--noSSLCheck[Don't check SSL certificates]"
  '--lockFile[Override the lock file name.]'
  '--noLockfile[Ignore the lock file if present.]'
  '--developFile[Specifies the name of the develop file which to be manipulated. If not present creates it.]'
  '--useSystemNim[Use system nim and ignore nim from the lock file if any]'
)

# XXX: more strict grouping for optspecs are disired
_arguments -S -C \
  - nimble ${(@)optspecs} \
    ':subcommands:{__nimble_commands_or_tasks}' \
    '*:: :->subcommands' && ret=0
  # - compiler \
  #   ${(@)nim_options} \
  #   ':subcommands:{__nimble_commands_or_tasks -c}' \
  #   '*:: :->subcommands' && ret=0

case ${state} in
  (subcommands)
    case ${words[1]} in
      (install)
        optspecs=( ${(@R)optspecs:#*(-p|--package)-*} )
        optspecs+=(
          '(-d --depsOnly)'{-d,--depsOnly}'[Install only dependencies.]'
          '(-p --passNim)*'{-p,--passNim}'-[Forward specified flag to compiler]:flags:{
            __nimble_colon_arg __nimble_nim_options
          }'
          "--noRebuild[Don't rebuild binaries if they're up-to-date]"
        )
        _arguments \
          ${(@)optspecs} \
          '*::package:{__nimble_installable_packages}' && ret=0
      ;;
      (develop)
        optspecs=( ${(@R)optspecs:#*(-n --reject)*} )
        optspecs+=(
          '--with-dependencies[]'
          '--develop-file[Specify the name of the develop file which to be manipulated]'
          '(-p --path)'{-p,--path}'-[Specify the path where the packages should be cloned]:path:{
            __nimble_colon_arg _path_files -/
          }'
          '(-a --add)'{-a,--add}'-[]:path:{ __nimble_colon_arg _files }'
          '(-r --remove-path)'{-r,--remove-path}'-[]:path:{ __nimble_colon_arg _files }'
          '(-n --remove-name)'{-n,--remove-name}'-[]:name:{ __nimble_colon_arg _message name }'
          '(-i --include:)'{-i,--include}'-[]:file:{ __nimble_colon_arg _files }'
          '(-e --exclude:)'{-e,--exclude}'-[]:file:{ __nimble_colon_arg _files }'
          '(-g --global)'{-g,--global}'[]'
        )
        _arguments \
          ${(@)optspecs} \
          '1:package:__nimble_installable_packages' && ret=0
      ;;
      (clean|check|publish|tasks|shell|shellenv)
        _message 'No more arguments' && ret=0
      ;;
      (add)
        __nimble_installable_packages && ret=0
      ;;
      (init)
        optspecs+=(
          '--git[Create a git repo in the new nible project.]'
          '--hg[Create a hg repo in the new nible project.]'
        )
        _arguments \
          ${(@)optspecs} \
          '*::pkgname:' && ret=0
      ;;
      (uninstall)
        optspecs+=(
          '(-i --inclDeps)'{-i,--inclDeps}'[Uninstall package and dependent packages]'
        )
        _arguments \
          ${(@)optspecs} \
          '*::pkgname: __nimble_installed_packages' && ret=0
      ;;
      (build|run|c|cc|js)
        # XXX: filenames starting with `-` might not be properly handled
        #      I just didn't care that much.
        if [[ ${words[CURRENT]} == -* ]]; then
          __nimble_nim_options && ret=0
        else
          __nimble_nim_files && ret=0
        fi
      ;;
      (test)
        optspecs+=(
          '(-c --continue)'{-c,--continue}'[Don''t stop execution on a failed test.]'
        )
        _arguments \
          ${(@)optspecs} && ret=0
      ;;
      (doc|doc2)
        __nimble_nim_options && ret=0
      ;;
      (refresh)
        _urls && ret=0
      ;;
      (search)
        optspecs+=(
          '--ver[Query remote server for package version.]'
        )
        # FIXME pkgname is not completed after --ver.
        _arguments \
          ${(@)optspecs} \
          '*:pkg-or-tag:{ __nimble_installable_packages }' && ret=0
      ;;
      (list)
        optspecs+=(
          '--ver[Query remote server for package version.]'
          '(-i --installed)'{-i,--installed}'[Lists all installed packages.]'
        )
        _arguments \
          ${(@)optspecs} && ret=0
      ;;
      (path)
        __nimble_installed_packages && ret=0
      ;;
      (dump)
        optspecs+=(
          '(-)--ini[Output in ini format (default)]'
          '(-)--json[Output in json format]'
        )
        _arguments \
          ${(@)optspecs} \
          '*: :{
            _alternative \
              "nimble-file-or-project-directory:nimble file or project directory:__nimble_nim_files" \
              "installed:installed package:__nimble_installed_packages"
          }' && ret=0
      ;;
      (lock)
        _arguments \
          ${(@)optspecs} && ret=0
      ;;
      (upgrade)
       __nimble_locked_deps && ret=0
      ;;
      (deps)
        _arguments \
          ${(@)optspect} \
          '--format=[Specify the output format]:format:(json)' && ret=0
      ;;
      (sync)
        optspecs+=(
          '(-l --list-only
)'{-l,--list-only}'[Only lists the packages which are not synced without actually perfoming the sync operation]'
        )
        _arguments \
          ${(@)optspecs} && ret=0
      ;;
      (setup)
        _arguments \
          ${(@)optspecs} && ret=0
      ;;

      (*)
        # Maybe user defined tasks
        _default && ret=0
      ;;
    esac
  ;;
esac

return ret

