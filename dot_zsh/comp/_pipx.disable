#compdef pipx

# ==========================================================
# _pipx
# Sun Aug 30 21:07:24 2020
# based on pipx version 0.15.5.1
# AUTHOR: solarizedalias
# Completions for pipx. (For those who don't accept bashcompinit).
# ==========================================================

setopt localoptions NO_shwordsplit
setopt warn_create_global typeset_silent no_short_loops no_auto_pushd
setopt extended_glob      glob_dots      rc_quotes      hist_subst_pattern

local context curcontext=${curcontext} state line expl state_descr ret=1
declare -A opt_args val_args

# '!'
local IGN

local -a pipx_commands=(
    'install:Install a package'
    'inject:Install packages into an existing Virtual Environment'
    'upgrade:Upgrade a package'
    'upgrade-all:Upgrade all packages. Runs `pip install -U <pkgname>` for each package.'
    'uninstall:Uninstall a package'
    'uninstall-all:Uninstall all packages'
    'reinstall-all:Reinstall all packages'
    'list:List installed packages'
    'run:Download the latest version of a package to a temporary virtual environment, then run an app from it. Also compatible with local `__pypackages__` directory (experimental).'
    'runpip:Run pip in an existing pipx-managed Virtual Environment'
    'ensurepath:Ensure directory where pipx stores apps is in your PATH environment variable.'
    'completions:Print instructions on enabling shell completions for pipx'
)

local -a pipx_subopts=(
  '(-h --help)'{-h,--help}'[show help message and exit]'
  '--include-deps[Include apps of dependent packages]'
  '--verbose[verbose output]'
  '(--force -f)'{--force,-f}'[Modify existing virtual environment and files in PIPX_BIN_DIR]'
  '--suffix[Optional suffix for virtual environment and executable names]'
  '--python[The Python executable used to create the Virtual Environment and run the associated app/apps. Must be v3.5+.]'
  '--system-site-packages[Give the virtual environment access to the system site-packages dir.]'
  '(--index-url -i)'{--index-url,-i}'[Base URL of Python Package Index]'
  '(--editable -e)'{--editable,-e}'[Install a project in editable mode]'
  '--pip-args[Arbitrary pip arguments to pass directly to pip install/upgrade commands]'
)

_arguments -C \
  '(-h --help)'{-h,--help}'[show help message and exit]' \
  '(: - *)--version[Prints version and exit]' \
  ':subcommands:{ _describe subcommands pipx_commands }' \
  '*:: :->command_args' && ret=0

case ${state} in
  (command_args)
    case ${words[1]} in
      (install)
        # --include-deps        Include apps of dependent packages
        # --verbose
        # --force, -f           Modify existing virtual environment and files in PIPX_BIN_DIR
        # --suffix SUFFIX       Optional suffix for virtual environment and executable names
        # --python PYTHON       The Python executable used to create the Virtual Environment and run the associated app/apps. Must be v3.5+.
        # --system-site-packages
        #                       Give the virtual environment access to the system site-packages dir.
        # --index-url INDEX_URL, -i INDEX_URL
        #                       Base URL of Python Package Index
        # --editable, -e        Install a project in editable mode
        # --pip-args PIP_ARGS   Arbitrary pip arguments to pass directly to pip install/upgrade commands

        # XXX _dispatch pip?
        _arguments -C \
          '(-h --help)'{-h,--help}'[show help message and exit]' \
          '--include-deps[Include apps of dependent packages]' \
          '--verbose[verbose output]' \
          '(--force -f)'{--force,-f}'[Modify existing virtual environment and files in PIPX_BIN_DIR]' \
          '--suffix[Optional suffix for virtual environment and executable names]' \
          '--python[The Python executable used to create the Virtual Environment and run the associated app/apps. Must be v3.5+.]' \
          '--system-site-packages[Give the virtual environment access to the system site-packages dir.]' \
          '(--index-url -i)'{--index-url,-i}'[Base URL of Python Package Index]' \
          '(--editable -e)'{--editable,-e}'[Install a project in editable mode]' \
          '--pip-args[Arbitrary pip arguments to pass directly to pip install/upgrade commands]' \
          '*::package:' && ret=0
      ;;
      (inject)
        # -h, --help            show this help message and exit
        # --include-apps        Add apps from the injected packages onto your PATH
        # --include-deps        Include apps of dependent packages
        # --system-site-packages
        #                       Give the virtual environment access to the system site-packages dir.
        # --index-url INDEX_URL, -i INDEX_URL
        #                       Base URL of Python Package Index
        # --editable, -e        Install a project in editable mode
        # --pip-args PIP_ARGS   Arbitrary pip arguments to pass directly to pip install/upgrade commands
        # --force, -f           Modify existing virtual environment and files in PIPX_BIN_DIR
        # --verbose
        _arguments \
          '(-h --help)'{-h,--help}'[show help message and exit]' \
          '--include-deps[Include apps of dependent packages]' \
          '--verbose[verbose output]' \
          '(--force -f)'{--force,-f}'[Modify existing virtual environment and files in PIPX_BIN_DIR]' \
          '--suffix[Optional suffix for virtual environment and executable names]' \
          '--python[The Python executable used to create the Virtual Environment and run the associated app/apps. Must be v3.5+.]' \
          '--system-site-packages[Give the virtual environment access to the system site-packages dir.]' \
          '(--index-url -i)'{--index-url,-i}'[Base URL of Python Package Index]' \
          '(--editable -e)'{--editable,-e}'[Install a project in editable mode]' \
          '--pip-args[Arbitrary pip arguments to pass directly to pip install/upgrade commands]' \
          '(--force -f)'{--force,-f}'[Modify existing virtual environment and files in PIPX_BIN_DIR]' \
          ':package:' \
          '*::dependencies' && ret=0
      ;;
      (upgrade)
        : TODO
      ;;
      (upgrade-all)
        : TODO
      ;;
      (uninstall)
        : TODO
      ;;
      (uninstall-all)
        : TODO
      ;;
      (reinstall-all)
        : TODO
      ;;
      (list)
        : TODO
      ;;
      (run)
        : TODO
      ;;
      (runpip)
        : TODO
      ;;
      (ensurepath)
        : TODO
      ;;
      (completions)
        : TODO
      ;;
    esac
  ;;
esac

return ret

