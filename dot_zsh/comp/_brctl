#compdef brctl

local curcontext="${curcontext}" expl ret=1

local VARIANT
_pick_variant -r VARIANT -c 'brctl --version 2>&1' \
  macos="brctl: unrecognized option \`--version'" default --version

case ${VARIANT} in
  (macos)
    local -a subcommands=(
      'diagnose:diagnose and collect logs'
      'download:download a local copy of the document at this path'
      'evict:evict the local copy of the document at this path'
      'log: '
      'dump:dump the CloudDocs database'
      'monitor:use NSMetadataQuery to monitor the container'
      'versions:list the non-local versions of the document at this path'
    )
    _arguments -C \
      '1:command:{ _describe command subcommands }' \
      '*:: :->args' && ret=0
    case ${state} in
      (args)
        case ${words[1]} in
          (diagnose)
            _arguments \
              '(-M --collect-mobile-documents)'{-M,--collect-mobile-documents=}'[]:container: ' \
              '(-s --sysdiagnose)'{-s,--sysdiagnose}"[do not collect what's already part of sysdiagnose]" \
              '(-n --name)'{-n,--name=}'[change the device name]:name: ' \
              '1:diagnosis output path:_files' && ret=0
          ;;
          (download|evict)
            _files && ret=0
          ;;
          (log)
            _arguments \
              '(-c --color)'{-c,--color=}'[turn on or off color use]:on/off:(on off)' \
              '(-d --path)'{-d,--path=}'[use specified path instead of default]:logs dir:_files' \
              '(-H --home)'{-H,--home=}'[use this as the ~ prefix, to look for ~/L/]:home dir:_files -/' \
              '(-f --filter)'{-f,--filter=}'[only show lines matching predicate]:predicate: ' \
              '(-m --multiline)'{-m,--multiline=}'[turn on or off multiple line logging]:on/off:(on off)' \
              '-n=[number of initial lines to display]' \
              '(-p --page)'{-p,--page}'[use paging]' \
              '(-w --wait)'{-w,--wait}'[wait for new logs continuously (syslog -w)]' \
              '(-t --shorten)'{-t,--shorten}'[shorten UUIDs, paths, etc]' \
              '(-s --digest)'{-s,--digest}'[only print digest logs]' \
              '1:command: ' && ret=0
          ;;
          (dump)
            _arguments \
              '(-o --output)'{-o,--output=}'[redirect output to specified file]:file path:_files' \
              '(-d --database-path)'{-d,--database-path=}'[use the database at specified path]:db path:_files' \
              '1:container: ' && ret=0
          ;;
          (monitor)
            _arguments \
              '(-S --scope)'{-S,--scope=}'[restrict the NSMDQ scope to DOCS, DATA, or BOTH]:scope:(
                DOCS DATA BOTH)' \
              '1:container: ' && ret=0
          ;;
          (versions)
            _arguments \
              '(-a --all)'{-a,--all}'[list all non-local versions including those that are locally cached]' \
              '1:path:_files' \
              '*:ALL|etags: ' && ret=0
          ;;
        esac
      ;;
    esac
  ;;
  (default)
    local subcmd
    if (( CURRENT == 2 )); then
      _describe 'brctl command' '(
        addbr:create\ instance\ of\ ethernet\ bridge
        delbr:deletes\ specified\ bridge\ instance
        show:show\ all\ current\ bridge\ instances
        addif:add\ interface\ to\ bridge
        delif:remove\ interface\ from\ bridge
        hairpin:toggle\ hairpin\ mode\ on\ a\ port
        showmacs:show\ a\ list\ of\ learned\ MAC\ addresses
        setageing:set\ MAC\ address\ ageing\ time
        setgcint:set\ garbage\ collection\ interval
        stp:control\ use\ of\ spanning\ tree\ protocol
        showstp:show\ bridge\ stp\ info
        setbridgeprio:set\ bridge\ priority
        setfd:set\ bridge\ forward\ delay
        sethello:set\ bridge\ hello\ time
        setmaxage:set\ maximum\ message\ age
        setpathcost:set\ cost\ of\ port
        setportprio:set\ priority\ of\ port
      )' && ret=0
    else
      shift words
      (( CURRENT-- ))
      subcmd="${words[1]}"
      curcontext="${curcontext%:*}-${subcmd}:"

      if (( CURRENT == 2 )); then
        _wanted bridges expl 'bridge' compadd \
          ${${(f)"$(brctl show 2>/dev/null)"}[2,-1]%%	*} && ret=0
      elif (( CURRENT == 3 )); then
        case ${subcmd} in
          (addif|delif)
            _net_interfaces && ret=0
          ;;
          (setageing|setgcint|setfd|sethello|setmaxage)
            _message -e time 'time (seconds)'
          ;;
          (setbridgeprio)
            _message -e priority 'priority'
          ;;
          (setpathcost|setportprio|hairpin)
            _message -e ports 'port'
          ;;
          (stp)
            _wanted states expl 'state' compadd on off && ret=0
          ;;
          (*)
            _message 'unknown subcommand: ${subcmd}'
          ;;
        esac
      elif (( CURRENT == 4 )); then
        if [[ ${subcmd} == setpathcost ]]; then
          _message -e cost 'cost'
        elif [[ ${subcmd} == setportprio ]]; then
          _message -e priority 'priority'
        elif [[ ${subcmd} == hairpin ]]; then
          _message -e onoff 'on|off'
        fi
      fi
    fi
  ;;
  (*)
    _message 'Unknown version'
  ;;
esac


return ret
